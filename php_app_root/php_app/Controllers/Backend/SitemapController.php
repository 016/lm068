<?php

namespace App\Controllers\Backend;

use App\Constants\CollectionStatus;
use App\Constants\ContentStatus;
use App\Constants\ContentType;
use App\Constants\TagStatus;
use App\Core\Config;
use App\Helpers\UrlHelper;
use App\Models\Collection;
use App\Models\Content;
use App\Models\Tag;

class SitemapController extends BackendController
{
    // --- 配置区域 ---
    public $base_url = 'https://lib00.com';
    public $items_per_page = 4;

    /**
     * 定义 before action 过滤器配置
     * 子类重写此方法来配置过滤器
     *
     * @return array 过滤器配置数组
     */
    protected function beforeActionFilters(): array
    {
        //return [] for skip auth check
        return [];

    }

    public function init()
    {
        $this->base_url = Config::get('request.base_url');
        $this->items_per_page = Config::get('pagination.per_page');

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * 公共入口方法，生成并输出完整的Sitemap
     */
    public function generate(): void
    {
        header('Content-Type: application/xml; charset=utf-8');

        $this->generateHeader();

        $this->generateHomepageUrls();
        $this->generateVideoDetailUrls();
        $this->generateFilteredListUrls();

        $this->generateFooter();
    }

    // ===================================================================
    //  XML 生成辅助方法 (保持不变)
    // ===================================================================

    private function generateHeader(): void
    {
        echo '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
        echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml">' . "\n";
    }

    private function generateFooter(): void
    {
        echo '</urlset>';
    }

    private function generateUrlEntry($zh_url, $en_url, $lastmod, $changefreq, $priority): void
    {
        $zh_url_escaped = htmlspecialchars($zh_url, ENT_XML1, 'UTF-8');
        $en_url_escaped = htmlspecialchars($en_url, ENT_XML1, 'UTF-8');

        echo "    <url>\n";
        echo "        <loc>{$zh_url_escaped}</loc>\n";
        echo "        <xhtml:link rel=\"alternate\" hreflang=\"zh\" href=\"{$zh_url_escaped}\"/>\n";
        echo "        <xhtml:link rel=\"alternate\" hreflang=\"en\" href=\"{$en_url_escaped}\"/>\n";
        echo "        <lastmod>{$lastmod}</lastmod>\n";
        echo "        <changefreq>{$changefreq}</changefreq>\n";
        echo "        <priority>{$priority}</priority>\n";
        echo "    </url>\n";
    }

    // ===================================================================
    //  URL 生成逻辑 (已重构)
    // ===================================================================

    private function generateHomepageUrls(): void
    {
        $homepage_cn = $this->base_url . '/content?lang=zh';
        $homepage_en = $this->base_url . '/content?lang=en';
        $this->generateUrlEntry($homepage_cn, $homepage_en, date('c'), 'daily', 1.0);
    }

    private function generateVideoDetailUrls(): void
    {
        $contents = Content::findAll(['status_id' => ContentStatus::PUBLISHED->value]);

        foreach ($contents as $oneContent) {
            $detail_url_cn = $this->base_url . "/content/{$oneContent['id']}/". UrlHelper::formatString($oneContent['title_en']) ."?lang=zh";
            $detail_url_en = $this->base_url . "/content/{$oneContent['id']}/". UrlHelper::formatString($oneContent['title_en']) ."?lang=en";
            $lastmod = date('c', strtotime($oneContent['updated_at']));
            $this->generateUrlEntry($detail_url_cn, $detail_url_en, $lastmod, 'weekly', 1.0);
        }
    }

    private function generateFilteredListUrls(): void
    {
        // 1. 处理 Tags
        $tags = Tag::findAll(['status_id'=>TagStatus::ENABLED->value]);
        foreach ($tags as $tag) {
            $list_url_cn = $this->base_url . "/content?tag_id={$tag['id']}&lang=zh";
            $list_url_en = $this->base_url . "/content?tag_id={$tag['id']}&lang=en";
            $this->generateUrlEntry($list_url_cn, $list_url_en, $tag['updated_at'], 'daily', 0.6);
        }

        // 2. 处理 Collections
        $collections = Collection::findAll(['status_id'=>CollectionStatus::ENABLED->value]);
        foreach ($collections as $collection) {
            $list_url_cn = $this->base_url . "/content?collection_id={$collection['id']}&lang=zh";
            $list_url_en = $this->base_url . "/content?collection_id={$collection['id']}&lang=en";
            $this->generateUrlEntry($list_url_cn, $list_url_en, $collection['updated_at'], 'daily', 0.6);
        }

        // 3. 处理 Content Types (来自常量)
        foreach (ContentType::getAllContentTypes() as $oneContentType) {

            // load this type's last updated content
            $lastChangedContent = Content::findOne(['content_type_id'=>$oneContentType['id']], 'updated_at DESC');

            //for no content type, use 2025-01-01 as last update date.
            $lastmod = date('c', strtotime('2025-10-01 00:00:00'));
            if ($lastChangedContent) {
                $lastmod = date('c', strtotime($lastChangedContent['updated_at']));
            }

            $list_url_cn = $this->base_url . "/content?content_type_id={$oneContentType['id']}&lang=zh";
            $list_url_en = $this->base_url . "/content?content_type_id={$oneContentType['id']}&lang=en";
            $this->generateUrlEntry($list_url_cn, $list_url_en, $lastmod, 'daily', 0.8);
        }
    }

    /**
     * 根据总数生成分页URL条目的辅助函数
     * @param string $paramName   URL参数名 ('tag_id', 'collection_id'...)
     * @param int    $id          参数值
     * @param int    $totalItems  该分类下的项目总数
     */
    private function generatePaginatedUrls($paramName, $id, $totalItems): void
    {
        if ($totalItems > 0) {
            $totalPages = ceil($totalItems / $this->items_per_page);
            for ($page = 1; $page <= $totalPages; $page++) {
                $list_url_cn = $this->base_url . "/content?{$paramName}={$id}&page={$page}&lang=zh";
                $list_url_en = $this->base_url . "/content?{$paramName}={$id}&page={$page}&lang=en";
                $this->generateUrlEntry($list_url_cn, $list_url_en, date('c'), 'daily', 0.9);
            }
        }
    }
}